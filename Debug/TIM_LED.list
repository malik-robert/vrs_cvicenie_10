
TIM_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001884  08001884  00011884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800189c  0800189c  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  0800189c  0800189c  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800189c  0800189c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800189c  0800189c  0001189c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018a0  080018a0  000118a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080018a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000008  080018ac  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080018ac  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000de8  00000000  00000000  00024068  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004e8  00000000  00000000  00024e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000460  00000000  00000000  00025338  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000023dc  00000000  00000000  00025798  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000374e  00000000  00000000  00027b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00071465  00000000  00000000  0002b2c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009c727  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000135c  00000000  00000000  0009c7a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800186c 	.word	0x0800186c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	0800186c 	.word	0x0800186c

080001c8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b089      	sub	sp, #36	; 0x24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	681a      	ldr	r2, [r3, #0]
 80001d8:	68bb      	ldr	r3, [r7, #8]
 80001da:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001dc:	697b      	ldr	r3, [r7, #20]
 80001de:	fa93 f3a3 	rbit	r3, r3
 80001e2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80001e4:	693b      	ldr	r3, [r7, #16]
 80001e6:	fab3 f383 	clz	r3, r3
 80001ea:	005b      	lsls	r3, r3, #1
 80001ec:	2103      	movs	r1, #3
 80001ee:	fa01 f303 	lsl.w	r3, r1, r3
 80001f2:	43db      	mvns	r3, r3
 80001f4:	401a      	ands	r2, r3
 80001f6:	68bb      	ldr	r3, [r7, #8]
 80001f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001fa:	69fb      	ldr	r3, [r7, #28]
 80001fc:	fa93 f3a3 	rbit	r3, r3
 8000200:	61bb      	str	r3, [r7, #24]
  return(result);
 8000202:	69bb      	ldr	r3, [r7, #24]
 8000204:	fab3 f383 	clz	r3, r3
 8000208:	005b      	lsls	r3, r3, #1
 800020a:	6879      	ldr	r1, [r7, #4]
 800020c:	fa01 f303 	lsl.w	r3, r1, r3
 8000210:	431a      	orrs	r2, r3
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	601a      	str	r2, [r3, #0]
}
 8000216:	bf00      	nop
 8000218:	3724      	adds	r7, #36	; 0x24
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr

08000222 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000222:	b480      	push	{r7}
 8000224:	b085      	sub	sp, #20
 8000226:	af00      	add	r7, sp, #0
 8000228:	60f8      	str	r0, [r7, #12]
 800022a:	60b9      	str	r1, [r7, #8]
 800022c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	685a      	ldr	r2, [r3, #4]
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	43db      	mvns	r3, r3
 8000236:	401a      	ands	r2, r3
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	6879      	ldr	r1, [r7, #4]
 800023c:	fb01 f303 	mul.w	r3, r1, r3
 8000240:	431a      	orrs	r2, r3
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	605a      	str	r2, [r3, #4]
}
 8000246:	bf00      	nop
 8000248:	3714      	adds	r7, #20
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr

08000252 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000252:	b480      	push	{r7}
 8000254:	b089      	sub	sp, #36	; 0x24
 8000256:	af00      	add	r7, sp, #0
 8000258:	60f8      	str	r0, [r7, #12]
 800025a:	60b9      	str	r1, [r7, #8]
 800025c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	689a      	ldr	r2, [r3, #8]
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	fa93 f3a3 	rbit	r3, r3
 800026c:	613b      	str	r3, [r7, #16]
  return(result);
 800026e:	693b      	ldr	r3, [r7, #16]
 8000270:	fab3 f383 	clz	r3, r3
 8000274:	005b      	lsls	r3, r3, #1
 8000276:	2103      	movs	r1, #3
 8000278:	fa01 f303 	lsl.w	r3, r1, r3
 800027c:	43db      	mvns	r3, r3
 800027e:	401a      	ands	r2, r3
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000284:	69fb      	ldr	r3, [r7, #28]
 8000286:	fa93 f3a3 	rbit	r3, r3
 800028a:	61bb      	str	r3, [r7, #24]
  return(result);
 800028c:	69bb      	ldr	r3, [r7, #24]
 800028e:	fab3 f383 	clz	r3, r3
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	6879      	ldr	r1, [r7, #4]
 8000296:	fa01 f303 	lsl.w	r3, r1, r3
 800029a:	431a      	orrs	r2, r3
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80002a0:	bf00      	nop
 80002a2:	3724      	adds	r7, #36	; 0x24
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr

080002ac <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b089      	sub	sp, #36	; 0x24
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	68da      	ldr	r2, [r3, #12]
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa93 f3a3 	rbit	r3, r3
 80002c6:	613b      	str	r3, [r7, #16]
  return(result);
 80002c8:	693b      	ldr	r3, [r7, #16]
 80002ca:	fab3 f383 	clz	r3, r3
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	2103      	movs	r1, #3
 80002d2:	fa01 f303 	lsl.w	r3, r1, r3
 80002d6:	43db      	mvns	r3, r3
 80002d8:	401a      	ands	r2, r3
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002de:	69fb      	ldr	r3, [r7, #28]
 80002e0:	fa93 f3a3 	rbit	r3, r3
 80002e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80002e6:	69bb      	ldr	r3, [r7, #24]
 80002e8:	fab3 f383 	clz	r3, r3
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	6879      	ldr	r1, [r7, #4]
 80002f0:	fa01 f303 	lsl.w	r3, r1, r3
 80002f4:	431a      	orrs	r2, r3
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	60da      	str	r2, [r3, #12]
}
 80002fa:	bf00      	nop
 80002fc:	3724      	adds	r7, #36	; 0x24
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr

08000306 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000306:	b480      	push	{r7}
 8000308:	b089      	sub	sp, #36	; 0x24
 800030a:	af00      	add	r7, sp, #0
 800030c:	60f8      	str	r0, [r7, #12]
 800030e:	60b9      	str	r1, [r7, #8]
 8000310:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	6a1a      	ldr	r2, [r3, #32]
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	fa93 f3a3 	rbit	r3, r3
 8000320:	613b      	str	r3, [r7, #16]
  return(result);
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	fab3 f383 	clz	r3, r3
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	210f      	movs	r1, #15
 800032c:	fa01 f303 	lsl.w	r3, r1, r3
 8000330:	43db      	mvns	r3, r3
 8000332:	401a      	ands	r2, r3
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000338:	69fb      	ldr	r3, [r7, #28]
 800033a:	fa93 f3a3 	rbit	r3, r3
 800033e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000340:	69bb      	ldr	r3, [r7, #24]
 8000342:	fab3 f383 	clz	r3, r3
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	6879      	ldr	r1, [r7, #4]
 800034a:	fa01 f303 	lsl.w	r3, r1, r3
 800034e:	431a      	orrs	r2, r3
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000354:	bf00      	nop
 8000356:	3724      	adds	r7, #36	; 0x24
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000360:	b480      	push	{r7}
 8000362:	b089      	sub	sp, #36	; 0x24
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	0a1b      	lsrs	r3, r3, #8
 8000374:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	fa93 f3a3 	rbit	r3, r3
 800037c:	613b      	str	r3, [r7, #16]
  return(result);
 800037e:	693b      	ldr	r3, [r7, #16]
 8000380:	fab3 f383 	clz	r3, r3
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	210f      	movs	r1, #15
 8000388:	fa01 f303 	lsl.w	r3, r1, r3
 800038c:	43db      	mvns	r3, r3
 800038e:	401a      	ands	r2, r3
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	0a1b      	lsrs	r3, r3, #8
 8000394:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000396:	69fb      	ldr	r3, [r7, #28]
 8000398:	fa93 f3a3 	rbit	r3, r3
 800039c:	61bb      	str	r3, [r7, #24]
  return(result);
 800039e:	69bb      	ldr	r3, [r7, #24]
 80003a0:	fab3 f383 	clz	r3, r3
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	6879      	ldr	r1, [r7, #4]
 80003a8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ac:	431a      	orrs	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80003b2:	bf00      	nop
 80003b4:	3724      	adds	r7, #36	; 0x24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b088      	sub	sp, #32
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
 80003c6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	fa93 f3a3 	rbit	r3, r3
 80003dc:	613b      	str	r3, [r7, #16]
  return(result);
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	fab3 f383 	clz	r3, r3
 80003e4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80003e6:	e048      	b.n	800047a <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	2101      	movs	r1, #1
 80003ee:	69fb      	ldr	r3, [r7, #28]
 80003f0:	fa01 f303 	lsl.w	r3, r1, r3
 80003f4:	4013      	ands	r3, r2
 80003f6:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80003f8:	69bb      	ldr	r3, [r7, #24]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d03a      	beq.n	8000474 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	461a      	mov	r2, r3
 8000404:	69b9      	ldr	r1, [r7, #24]
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f7ff fede 	bl	80001c8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d003      	beq.n	800041c <LL_GPIO_Init+0x5e>
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	2b02      	cmp	r3, #2
 800041a:	d106      	bne.n	800042a <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	461a      	mov	r2, r3
 8000422:	69b9      	ldr	r1, [r7, #24]
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	f7ff ff14 	bl	8000252 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	691b      	ldr	r3, [r3, #16]
 800042e:	461a      	mov	r2, r3
 8000430:	69b9      	ldr	r1, [r7, #24]
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	f7ff ff3a 	bl	80002ac <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	2b02      	cmp	r3, #2
 800043e:	d119      	bne.n	8000474 <LL_GPIO_Init+0xb6>
 8000440:	69bb      	ldr	r3, [r7, #24]
 8000442:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	fa93 f3a3 	rbit	r3, r3
 800044a:	60bb      	str	r3, [r7, #8]
  return(result);
 800044c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800044e:	fab3 f383 	clz	r3, r3
 8000452:	2b07      	cmp	r3, #7
 8000454:	d807      	bhi.n	8000466 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	461a      	mov	r2, r3
 800045c:	69b9      	ldr	r1, [r7, #24]
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ff51 	bl	8000306 <LL_GPIO_SetAFPin_0_7>
 8000464:	e006      	b.n	8000474 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	461a      	mov	r2, r3
 800046c:	69b9      	ldr	r1, [r7, #24]
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f7ff ff76 	bl	8000360 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000474:	69fb      	ldr	r3, [r7, #28]
 8000476:	3301      	adds	r3, #1
 8000478:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	69fb      	ldr	r3, [r7, #28]
 8000480:	fa22 f303 	lsr.w	r3, r2, r3
 8000484:	2b00      	cmp	r3, #0
 8000486:	d1af      	bne.n	80003e8 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d003      	beq.n	8000498 <LL_GPIO_Init+0xda>
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	2b02      	cmp	r3, #2
 8000496:	d107      	bne.n	80004a8 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	6819      	ldr	r1, [r3, #0]
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	461a      	mov	r2, r3
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	f7ff febd 	bl	8000222 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80004a8:	2300      	movs	r3, #0
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3720      	adds	r7, #32
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b083      	sub	sp, #12
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
 80004ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	683a      	ldr	r2, [r7, #0]
 80004c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr

080004ce <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80004ce:	b480      	push	{r7}
 80004d0:	b083      	sub	sp, #12
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
 80004d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	683a      	ldr	r2, [r7, #0]
 80004dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80004ea:	b480      	push	{r7}
 80004ec:	b083      	sub	sp, #12
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
 80004f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	683a      	ldr	r2, [r7, #0]
 80004f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000506:	b480      	push	{r7}
 8000508:	b083      	sub	sp, #12
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
 800050e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	683a      	ldr	r2, [r7, #0]
 8000514:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr

0800053e <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800053e:	b480      	push	{r7}
 8000540:	b083      	sub	sp, #12
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
 8000546:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	683a      	ldr	r2, [r7, #0]
 800054c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	683a      	ldr	r2, [r7, #0]
 8000568:	641a      	str	r2, [r3, #64]	; 0x40
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
 800057e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	683a      	ldr	r2, [r7, #0]
 8000584:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	683a      	ldr	r2, [r7, #0]
 80005a0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f043 0201 	orr.w	r2, r3, #1
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	615a      	str	r2, [r3, #20]
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a2f      	ldr	r2, [pc, #188]	; (80006a4 <LL_TIM_Init+0xd4>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d007      	beq.n	80005fc <LL_TIM_Init+0x2c>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005f2:	d003      	beq.n	80005fc <LL_TIM_Init+0x2c>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a2c      	ldr	r2, [pc, #176]	; (80006a8 <LL_TIM_Init+0xd8>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d106      	bne.n	800060a <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	4313      	orrs	r3, r2
 8000608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a25      	ldr	r2, [pc, #148]	; (80006a4 <LL_TIM_Init+0xd4>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d013      	beq.n	800063a <LL_TIM_Init+0x6a>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000618:	d00f      	beq.n	800063a <LL_TIM_Init+0x6a>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a22      	ldr	r2, [pc, #136]	; (80006a8 <LL_TIM_Init+0xd8>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d00b      	beq.n	800063a <LL_TIM_Init+0x6a>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a21      	ldr	r2, [pc, #132]	; (80006ac <LL_TIM_Init+0xdc>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d007      	beq.n	800063a <LL_TIM_Init+0x6a>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <LL_TIM_Init+0xe0>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d003      	beq.n	800063a <LL_TIM_Init+0x6a>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a1f      	ldr	r2, [pc, #124]	; (80006b4 <LL_TIM_Init+0xe4>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d106      	bne.n	8000648 <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	4313      	orrs	r3, r2
 8000646:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	4619      	mov	r1, r3
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff ff3a 	bl	80004ce <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	4619      	mov	r1, r3
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff ff26 	bl	80004b2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a0e      	ldr	r2, [pc, #56]	; (80006a4 <LL_TIM_Init+0xd4>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d00b      	beq.n	8000686 <LL_TIM_Init+0xb6>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <LL_TIM_Init+0xdc>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d007      	beq.n	8000686 <LL_TIM_Init+0xb6>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <LL_TIM_Init+0xe0>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d003      	beq.n	8000686 <LL_TIM_Init+0xb6>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a0c      	ldr	r2, [pc, #48]	; (80006b4 <LL_TIM_Init+0xe4>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d105      	bne.n	8000692 <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	7c1b      	ldrb	r3, [r3, #16]
 800068a:	4619      	mov	r1, r3
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f7ff ff2c 	bl	80004ea <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f7ff ff8b 	bl	80005ae <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8000698:	2300      	movs	r3, #0
}
 800069a:	4618      	mov	r0, r3
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40012c00 	.word	0x40012c00
 80006a8:	40000400 	.word	0x40000400
 80006ac:	40014000 	.word	0x40014000
 80006b0:	40014400 	.word	0x40014400
 80006b4:	40014800 	.word	0x40014800

080006b8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80006c4:	2301      	movs	r3, #1
 80006c6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006ce:	d01f      	beq.n	8000710 <LL_TIM_OC_Init+0x58>
 80006d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006d4:	d804      	bhi.n	80006e0 <LL_TIM_OC_Init+0x28>
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d00c      	beq.n	80006f4 <LL_TIM_OC_Init+0x3c>
 80006da:	2b10      	cmp	r3, #16
 80006dc:	d011      	beq.n	8000702 <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80006de:	e033      	b.n	8000748 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 80006e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006e4:	d022      	beq.n	800072c <LL_TIM_OC_Init+0x74>
 80006e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80006ea:	d026      	beq.n	800073a <LL_TIM_OC_Init+0x82>
 80006ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006f0:	d015      	beq.n	800071e <LL_TIM_OC_Init+0x66>
      break;
 80006f2:	e029      	b.n	8000748 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80006f4:	6879      	ldr	r1, [r7, #4]
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f000 f82c 	bl	8000754 <OC1Config>
 80006fc:	4603      	mov	r3, r0
 80006fe:	75fb      	strb	r3, [r7, #23]
      break;
 8000700:	e022      	b.n	8000748 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	68f8      	ldr	r0, [r7, #12]
 8000706:	f000 f8a5 	bl	8000854 <OC2Config>
 800070a:	4603      	mov	r3, r0
 800070c:	75fb      	strb	r3, [r7, #23]
      break;
 800070e:	e01b      	b.n	8000748 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8000710:	6879      	ldr	r1, [r7, #4]
 8000712:	68f8      	ldr	r0, [r7, #12]
 8000714:	f000 f922 	bl	800095c <OC3Config>
 8000718:	4603      	mov	r3, r0
 800071a:	75fb      	strb	r3, [r7, #23]
      break;
 800071c:	e014      	b.n	8000748 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	68f8      	ldr	r0, [r7, #12]
 8000722:	f000 f99f 	bl	8000a64 <OC4Config>
 8000726:	4603      	mov	r3, r0
 8000728:	75fb      	strb	r3, [r7, #23]
      break;
 800072a:	e00d      	b.n	8000748 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800072c:	6879      	ldr	r1, [r7, #4]
 800072e:	68f8      	ldr	r0, [r7, #12]
 8000730:	f000 fa04 	bl	8000b3c <OC5Config>
 8000734:	4603      	mov	r3, r0
 8000736:	75fb      	strb	r3, [r7, #23]
      break;
 8000738:	e006      	b.n	8000748 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	68f8      	ldr	r0, [r7, #12]
 800073e:	f000 fa5f 	bl	8000c00 <OC6Config>
 8000742:	4603      	mov	r3, r0
 8000744:	75fb      	strb	r3, [r7, #23]
      break;
 8000746:	bf00      	nop
  }

  return result;
 8000748:	7dfb      	ldrb	r3, [r7, #23]
}
 800074a:	4618      	mov	r0, r3
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6a1b      	ldr	r3, [r3, #32]
 800076e:	f023 0201 	bic.w	r2, r3, #1
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6a1b      	ldr	r3, [r3, #32]
 800077a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f023 0303 	bic.w	r3, r3, #3
 800078e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800079a:	683a      	ldr	r2, [r7, #0]
 800079c:	6812      	ldr	r2, [r2, #0]
 800079e:	4313      	orrs	r3, r2
 80007a0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	f023 0202 	bic.w	r2, r3, #2
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	691b      	ldr	r3, [r3, #16]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	f023 0201 	bic.w	r2, r3, #1
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	4313      	orrs	r3, r2
 80007bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4a20      	ldr	r2, [pc, #128]	; (8000844 <OC1Config+0xf0>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d00b      	beq.n	80007de <OC1Config+0x8a>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4a1f      	ldr	r2, [pc, #124]	; (8000848 <OC1Config+0xf4>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d007      	beq.n	80007de <OC1Config+0x8a>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4a1e      	ldr	r2, [pc, #120]	; (800084c <OC1Config+0xf8>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d003      	beq.n	80007de <OC1Config+0x8a>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a1d      	ldr	r2, [pc, #116]	; (8000850 <OC1Config+0xfc>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d11e      	bne.n	800081c <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	f023 0208 	bic.w	r2, r3, #8
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	695b      	ldr	r3, [r3, #20]
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	4313      	orrs	r3, r2
 80007ec:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	f023 0204 	bic.w	r2, r3, #4
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	4313      	orrs	r3, r2
 80007fc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4313      	orrs	r3, r2
 800080a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4313      	orrs	r3, r2
 800081a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	693a      	ldr	r2, [r7, #16]
 8000820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	4619      	mov	r1, r3
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff fe69 	bl	8000506 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	697a      	ldr	r2, [r7, #20]
 8000838:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800083a:	2300      	movs	r3, #0
}
 800083c:	4618      	mov	r0, r3
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40012c00 	.word	0x40012c00
 8000848:	40014000 	.word	0x40014000
 800084c:	40014400 	.word	0x40014400
 8000850:	40014800 	.word	0x40014800

08000854 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6a1b      	ldr	r3, [r3, #32]
 800086e:	f023 0210 	bic.w	r2, r3, #16
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6a1b      	ldr	r3, [r3, #32]
 800087a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800088e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800089a:	683a      	ldr	r2, [r7, #0]
 800089c:	6812      	ldr	r2, [r2, #0]
 800089e:	0212      	lsls	r2, r2, #8
 80008a0:	4313      	orrs	r3, r2
 80008a2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	f023 0220 	bic.w	r2, r3, #32
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	691b      	ldr	r3, [r3, #16]
 80008ae:	011b      	lsls	r3, r3, #4
 80008b0:	4313      	orrs	r3, r2
 80008b2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	f023 0210 	bic.w	r2, r3, #16
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	011b      	lsls	r3, r3, #4
 80008c0:	4313      	orrs	r3, r2
 80008c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a21      	ldr	r2, [pc, #132]	; (800094c <OC2Config+0xf8>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d00b      	beq.n	80008e4 <OC2Config+0x90>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a20      	ldr	r2, [pc, #128]	; (8000950 <OC2Config+0xfc>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d007      	beq.n	80008e4 <OC2Config+0x90>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a1f      	ldr	r2, [pc, #124]	; (8000954 <OC2Config+0x100>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d003      	beq.n	80008e4 <OC2Config+0x90>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a1e      	ldr	r2, [pc, #120]	; (8000958 <OC2Config+0x104>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d11f      	bne.n	8000924 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	019b      	lsls	r3, r3, #6
 80008f0:	4313      	orrs	r3, r2
 80008f2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	019b      	lsls	r3, r3, #6
 8000900:	4313      	orrs	r3, r2
 8000902:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4313      	orrs	r3, r2
 8000912:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	00db      	lsls	r3, r3, #3
 8000920:	4313      	orrs	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	68fa      	ldr	r2, [r7, #12]
 800092e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	4619      	mov	r1, r3
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f7ff fdf3 	bl	8000522 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	697a      	ldr	r2, [r7, #20]
 8000940:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000942:	2300      	movs	r3, #0
}
 8000944:	4618      	mov	r0, r3
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40012c00 	.word	0x40012c00
 8000950:	40014000 	.word	0x40014000
 8000954:	40014400 	.word	0x40014400
 8000958:	40014800 	.word	0x40014800

0800095c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6a1b      	ldr	r3, [r3, #32]
 8000976:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6a1b      	ldr	r3, [r3, #32]
 8000982:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f023 0303 	bic.w	r3, r3, #3
 8000996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800099e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	6812      	ldr	r2, [r2, #0]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	691b      	ldr	r3, [r3, #16]
 80009b4:	021b      	lsls	r3, r3, #8
 80009b6:	4313      	orrs	r3, r2
 80009b8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	021b      	lsls	r3, r3, #8
 80009c6:	4313      	orrs	r3, r2
 80009c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a21      	ldr	r2, [pc, #132]	; (8000a54 <OC3Config+0xf8>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d00b      	beq.n	80009ea <OC3Config+0x8e>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a20      	ldr	r2, [pc, #128]	; (8000a58 <OC3Config+0xfc>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d007      	beq.n	80009ea <OC3Config+0x8e>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a1f      	ldr	r2, [pc, #124]	; (8000a5c <OC3Config+0x100>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d003      	beq.n	80009ea <OC3Config+0x8e>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a1e      	ldr	r2, [pc, #120]	; (8000a60 <OC3Config+0x104>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d11f      	bne.n	8000a2a <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	695b      	ldr	r3, [r3, #20]
 80009f4:	029b      	lsls	r3, r3, #10
 80009f6:	4313      	orrs	r3, r2
 80009f8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	029b      	lsls	r3, r3, #10
 8000a06:	4313      	orrs	r3, r2
 8000a08:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	011b      	lsls	r3, r3, #4
 8000a16:	4313      	orrs	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	69db      	ldr	r3, [r3, #28]
 8000a24:	015b      	lsls	r3, r3, #5
 8000a26:	4313      	orrs	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff fd7e 	bl	800053e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	697a      	ldr	r2, [r7, #20]
 8000a46:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40012c00 	.word	0x40012c00
 8000a58:	40014000 	.word	0x40014000
 8000a5c:	40014400 	.word	0x40014400
 8000a60:	40014800 	.word	0x40014800

08000a64 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6a1b      	ldr	r3, [r3, #32]
 8000a7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6a1b      	ldr	r3, [r3, #32]
 8000a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a9e:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000aaa:	683a      	ldr	r2, [r7, #0]
 8000aac:	6812      	ldr	r2, [r2, #0]
 8000aae:	0212      	lsls	r2, r2, #8
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	691b      	ldr	r3, [r3, #16]
 8000abe:	031b      	lsls	r3, r3, #12
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	031b      	lsls	r3, r3, #12
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a15      	ldr	r2, [pc, #84]	; (8000b2c <OC4Config+0xc8>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d00b      	beq.n	8000af4 <OC4Config+0x90>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <OC4Config+0xcc>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d007      	beq.n	8000af4 <OC4Config+0x90>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a13      	ldr	r2, [pc, #76]	; (8000b34 <OC4Config+0xd0>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d003      	beq.n	8000af4 <OC4Config+0x90>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <OC4Config+0xd4>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d107      	bne.n	8000b04 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	019b      	lsls	r3, r3, #6
 8000b00:	4313      	orrs	r3, r2
 8000b02:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	697a      	ldr	r2, [r7, #20]
 8000b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	4619      	mov	r1, r3
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff fd1f 	bl	800055a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40012c00 	.word	0x40012c00
 8000b30:	40014000 	.word	0x40014000
 8000b34:	40014400 	.word	0x40014400
 8000b38:	40014800 	.word	0x40014800

08000b3c <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6a1b      	ldr	r3, [r3, #32]
 8000b52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6a1b      	ldr	r3, [r3, #32]
 8000b5e:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b64:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	6812      	ldr	r2, [r2, #0]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	691b      	ldr	r3, [r3, #16]
 8000b82:	041b      	lsls	r3, r3, #16
 8000b84:	4313      	orrs	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	041b      	lsls	r3, r3, #16
 8000b94:	4313      	orrs	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a15      	ldr	r2, [pc, #84]	; (8000bf0 <OC5Config+0xb4>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d00b      	beq.n	8000bb8 <OC5Config+0x7c>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <OC5Config+0xb8>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d007      	beq.n	8000bb8 <OC5Config+0x7c>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a13      	ldr	r2, [pc, #76]	; (8000bf8 <OC5Config+0xbc>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d003      	beq.n	8000bb8 <OC5Config+0x7c>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <OC5Config+0xc0>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d109      	bne.n	8000bcc <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	021b      	lsls	r3, r3, #8
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff fccc 	bl	8000576 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40012c00 	.word	0x40012c00
 8000bf4:	40014000 	.word	0x40014000
 8000bf8:	40014400 	.word	0x40014400
 8000bfc:	40014800 	.word	0x40014800

08000c00 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6a1b      	ldr	r3, [r3, #32]
 8000c16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6a1b      	ldr	r3, [r3, #32]
 8000c22:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c28:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	6812      	ldr	r2, [r2, #0]
 8000c38:	0212      	lsls	r2, r2, #8
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	691b      	ldr	r3, [r3, #16]
 8000c48:	051b      	lsls	r3, r3, #20
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	051b      	lsls	r3, r3, #20
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a14      	ldr	r2, [pc, #80]	; (8000cb4 <OC6Config+0xb4>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d00b      	beq.n	8000c7e <OC6Config+0x7e>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a13      	ldr	r2, [pc, #76]	; (8000cb8 <OC6Config+0xb8>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d007      	beq.n	8000c7e <OC6Config+0x7e>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <OC6Config+0xbc>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d003      	beq.n	8000c7e <OC6Config+0x7e>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a11      	ldr	r2, [pc, #68]	; (8000cc0 <OC6Config+0xc0>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d109      	bne.n	8000c92 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	029b      	lsls	r3, r3, #10
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff fc77 	bl	8000592 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000caa:	2300      	movs	r3, #0
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40012c00 	.word	0x40012c00
 8000cb8:	40014000 	.word	0x40014000
 8000cbc:	40014400 	.word	0x40014400
 8000cc0:	40014800 	.word	0x40014800

08000cc4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd6:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <LL_InitTick+0x30>)
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <LL_InitTick+0x30>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <LL_InitTick+0x30>)
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000d00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ffdd 	bl	8000cc4 <LL_InitTick>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000d1c:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <LL_SetSystemCoreClock+0x1c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000004 	.word	0x20000004

08000d34 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d3e:	695a      	ldr	r2, [r3, #20]
 8000d40:	4907      	ldr	r1, [pc, #28]	; (8000d60 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d4a:	695a      	ldr	r2, [r3, #20]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d52:	68fb      	ldr	r3, [r7, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	40021000 	.word	0x40021000

08000d64 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d68:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d6c:	f7ff ffe2 	bl	8000d34 <LL_AHB1_GRP1_EnableClock>

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <LL_RCC_HSI_Enable+0x1c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <LL_RCC_HSI_Enable+0x1c>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000

08000ddc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <LL_RCC_HSI_IsReady+0x20>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	bf0c      	ite	eq
 8000dec:	2301      	moveq	r3, #1
 8000dee:	2300      	movne	r3, #0
 8000df0:	b2db      	uxtb	r3, r3
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	40021000 	.word	0x40021000

08000e00 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	4904      	ldr	r1, [pc, #16]	; (8000e28 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000e16:	4313      	orrs	r3, r2
 8000e18:	600b      	str	r3, [r1, #0]
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000

08000e2c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <LL_RCC_SetSysClkSource+0x24>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f023 0203 	bic.w	r2, r3, #3
 8000e3c:	4904      	ldr	r1, [pc, #16]	; (8000e50 <LL_RCC_SetSysClkSource+0x24>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	604b      	str	r3, [r1, #4]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	40021000 	.word	0x40021000

08000e54 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <LL_RCC_GetSysClkSource+0x18>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 030c 	and.w	r3, r3, #12
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000

08000e70 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <LL_RCC_SetAHBPrescaler+0x24>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e80:	4904      	ldr	r1, [pc, #16]	; (8000e94 <LL_RCC_SetAHBPrescaler+0x24>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	604b      	str	r3, [r1, #4]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	40021000 	.word	0x40021000

08000e98 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000ea8:	4904      	ldr	r1, [pc, #16]	; (8000ebc <LL_RCC_SetAPB1Prescaler+0x24>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	604b      	str	r3, [r1, #4]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000ed0:	4904      	ldr	r1, [pc, #16]	; (8000ee4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	604b      	str	r3, [r1, #4]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ef2:	69da      	ldr	r2, [r3, #28]
 8000ef4:	4907      	ldr	r1, [pc, #28]	; (8000f14 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000efe:	69da      	ldr	r2, [r3, #28]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4013      	ands	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	40021000 	.word	0x40021000

08000f18 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f22:	699a      	ldr	r2, [r3, #24]
 8000f24:	4907      	ldr	r1, [pc, #28]	; (8000f44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f2e:	699a      	ldr	r2, [r3, #24]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4013      	ands	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f36:	68fb      	ldr	r3, [r7, #12]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	40021000 	.word	0x40021000

08000f48 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <LL_FLASH_SetLatency+0x24>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f023 0207 	bic.w	r2, r3, #7
 8000f58:	4904      	ldr	r1, [pc, #16]	; (8000f6c <LL_FLASH_SetLatency+0x24>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	600b      	str	r3, [r1, #0]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	40022000 	.word	0x40022000

08000f70 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000f74:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <LL_FLASH_GetLatency+0x18>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0307 	and.w	r3, r3, #7
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40022000 	.word	0x40022000

08000f8c <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	d106      	bne.n	8000fa8 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <LL_SYSTICK_SetClkSource+0x34>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <LL_SYSTICK_SetClkSource+0x34>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8000fa6:	e005      	b.n	8000fb4 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <LL_SYSTICK_SetClkSource+0x34>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <LL_SYSTICK_SetClkSource+0x34>)
 8000fae:	f023 0304 	bic.w	r3, r3, #4
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000e010 	.word	0xe000e010

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f7ff ffa5 	bl	8000f18 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000fce:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000fd2:	f7ff ff89 	bl	8000ee8 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd6:	2003      	movs	r0, #3
 8000fd8:	f7ff fecc 	bl	8000d74 <NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fdc:	f000 f806 	bl	8000fec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe0:	f7ff fec0 	bl	8000d64 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fe4:	f000 fb5a 	bl	800169c <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <main+0x24>
	...

08000fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f7ff ffa9 	bl	8000f48 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8000ff6:	f7ff ffbb 	bl	8000f70 <LL_FLASH_GetLatency>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0x18>
  {
  Error_Handler();
 8001000:	f000 f82a 	bl	8001058 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8001004:	f7ff feda 	bl	8000dbc <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001008:	bf00      	nop
 800100a:	f7ff fee7 	bl	8000ddc <LL_RCC_HSI_IsReady>
 800100e:	4603      	mov	r3, r0
 8001010:	2b01      	cmp	r3, #1
 8001012:	d1fa      	bne.n	800100a <SystemClock_Config+0x1e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001014:	2010      	movs	r0, #16
 8001016:	f7ff fef3 	bl	8000e00 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800101a:	2000      	movs	r0, #0
 800101c:	f7ff ff28 	bl	8000e70 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001020:	2000      	movs	r0, #0
 8001022:	f7ff ff39 	bl	8000e98 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001026:	2000      	movs	r0, #0
 8001028:	f7ff ff4a 	bl	8000ec0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800102c:	2000      	movs	r0, #0
 800102e:	f7ff fefd 	bl	8000e2c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001032:	bf00      	nop
 8001034:	f7ff ff0e 	bl	8000e54 <LL_RCC_GetSysClkSource>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1fa      	bne.n	8001034 <SystemClock_Config+0x48>
  {

  }
  LL_Init1msTick(8000000);
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <SystemClock_Config+0x68>)
 8001040:	f7ff fe5a 	bl	8000cf8 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001044:	2004      	movs	r0, #4
 8001046:	f7ff ffa1 	bl	8000f8c <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 800104a:	4802      	ldr	r0, [pc, #8]	; (8001054 <SystemClock_Config+0x68>)
 800104c:	f7ff fe62 	bl	8000d14 <LL_SetSystemCoreClock>
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	007a1200 	.word	0x007a1200

08001058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <LL_TIM_ClearFlag_UPDATE>:
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f06f 0201 	mvn.w	r2, #1
 8001074:	611a      	str	r2, [r3, #16]
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	2b01      	cmp	r3, #1
 8001094:	bf0c      	ite	eq
 8001096:	2301      	moveq	r3, #1
 8001098:	2300      	movne	r3, #0
 800109a:	b2db      	uxtb	r3, r3
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <HardFault_Handler+0x4>

080010bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <MemManage_Handler+0x4>

080010c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <BusFault_Handler+0x4>

080010c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <UsageFault_Handler+0x4>

080010ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <TIM2_IRQHandler>:
/******************************************************************************/

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	static uint8_t intensity = 0;
	static state led_state = DOWN;

	if (LL_TIM_IsActiveFlag_UPDATE(TIM2)) {
 800110c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001110:	f7ff ffb7 	bl	8001082 <LL_TIM_IsActiveFlag_UPDATE>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d020      	beq.n	800115c <TIM2_IRQHandler+0x54>
		led_state = setLedState(led_mode, led_state, intensity, intensity_set_point);
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <TIM2_IRQHandler+0x60>)
 800111c:	7818      	ldrb	r0, [r3, #0]
 800111e:	4b13      	ldr	r3, [pc, #76]	; (800116c <TIM2_IRQHandler+0x64>)
 8001120:	7819      	ldrb	r1, [r3, #0]
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <TIM2_IRQHandler+0x68>)
 8001124:	781a      	ldrb	r2, [r3, #0]
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <TIM2_IRQHandler+0x6c>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	f000 f843 	bl	80011b4 <setLedState>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <TIM2_IRQHandler+0x64>)
 8001134:	701a      	strb	r2, [r3, #0]
		intensity = setIntensity(led_mode, led_state, intensity, intensity_set_point);
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <TIM2_IRQHandler+0x60>)
 8001138:	7818      	ldrb	r0, [r3, #0]
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <TIM2_IRQHandler+0x64>)
 800113c:	7819      	ldrb	r1, [r3, #0]
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <TIM2_IRQHandler+0x68>)
 8001140:	781a      	ldrb	r2, [r3, #0]
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <TIM2_IRQHandler+0x6c>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	f000 f865 	bl	8001214 <setIntensity>
 800114a:	4603      	mov	r3, r0
 800114c:	461a      	mov	r2, r3
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <TIM2_IRQHandler+0x68>)
 8001150:	701a      	strb	r2, [r3, #0]
		setDutyCycle(intensity);
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <TIM2_IRQHandler+0x68>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f80e 	bl	8001178 <setDutyCycle>
	}

  LL_TIM_ClearFlag_UPDATE(TIM2);
 800115c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001160:	f7ff ff81 	bl	8001066 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000000 	.word	0x20000000
 800116c:	20000024 	.word	0x20000024
 8001170:	20000025 	.word	0x20000025
 8001174:	20000001 	.word	0x20000001

08001178 <setDutyCycle>:

/* USER CODE BEGIN 1 */
void setDutyCycle(uint8_t D) {
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	if (D >= PWM_MIN && D <= PWM_MAX) {
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b63      	cmp	r3, #99	; 0x63
 8001186:	d80c      	bhi.n	80011a2 <setDutyCycle+0x2a>
		TIM2->CCR1 = (TIM2->ARR*D)/99u;
 8001188:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800118c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118e:	79fa      	ldrb	r2, [r7, #7]
 8001190:	fb02 f303 	mul.w	r3, r2, r3
 8001194:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001198:	4905      	ldr	r1, [pc, #20]	; (80011b0 <setDutyCycle+0x38>)
 800119a:	fba1 1303 	umull	r1, r3, r1, r3
 800119e:	099b      	lsrs	r3, r3, #6
 80011a0:	6353      	str	r3, [r2, #52]	; 0x34
	}
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	a57eb503 	.word	0xa57eb503

080011b4 <setLedState>:

state setLedState(mode led_mode, state led_state, uint8_t intensity, uint8_t intensity_set_point) {
 80011b4:	b490      	push	{r4, r7}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4604      	mov	r4, r0
 80011bc:	4608      	mov	r0, r1
 80011be:	4611      	mov	r1, r2
 80011c0:	461a      	mov	r2, r3
 80011c2:	4623      	mov	r3, r4
 80011c4:	71fb      	strb	r3, [r7, #7]
 80011c6:	4603      	mov	r3, r0
 80011c8:	71bb      	strb	r3, [r7, #6]
 80011ca:	460b      	mov	r3, r1
 80011cc:	717b      	strb	r3, [r7, #5]
 80011ce:	4613      	mov	r3, r2
 80011d0:	713b      	strb	r3, [r7, #4]
	switch (led_mode) {
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00d      	beq.n	80011f4 <setLedState+0x40>
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d115      	bne.n	8001208 <setLedState+0x54>
		case AUTO:
			if (intensity >= PWM_MAX) {
 80011dc:	797b      	ldrb	r3, [r7, #5]
 80011de:	2b62      	cmp	r3, #98	; 0x62
 80011e0:	d902      	bls.n	80011e8 <setLedState+0x34>
				led_state = DOWN;
 80011e2:	2300      	movs	r3, #0
 80011e4:	71bb      	strb	r3, [r7, #6]
			}
			else if (intensity <= PWM_MIN) {
				led_state = UP;
			}
			break;
 80011e6:	e00e      	b.n	8001206 <setLedState+0x52>
			else if (intensity <= PWM_MIN) {
 80011e8:	797b      	ldrb	r3, [r7, #5]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10b      	bne.n	8001206 <setLedState+0x52>
				led_state = UP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	71bb      	strb	r3, [r7, #6]
			break;
 80011f2:	e008      	b.n	8001206 <setLedState+0x52>

		case MAN:
			led_state = (intensity >= intensity_set_point) ? DOWN : UP;
 80011f4:	797a      	ldrb	r2, [r7, #5]
 80011f6:	793b      	ldrb	r3, [r7, #4]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	bf34      	ite	cc
 80011fc:	2301      	movcc	r3, #1
 80011fe:	2300      	movcs	r3, #0
 8001200:	b2db      	uxtb	r3, r3
 8001202:	71bb      	strb	r3, [r7, #6]
			break;
 8001204:	e000      	b.n	8001208 <setLedState+0x54>
			break;
 8001206:	bf00      	nop
	}

	return led_state;
 8001208:	79bb      	ldrb	r3, [r7, #6]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bc90      	pop	{r4, r7}
 8001212:	4770      	bx	lr

08001214 <setIntensity>:

uint8_t setIntensity(mode led_mode, state led_state, uint8_t intensity, uint8_t intensity_set_point) {
 8001214:	b490      	push	{r4, r7}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4604      	mov	r4, r0
 800121c:	4608      	mov	r0, r1
 800121e:	4611      	mov	r1, r2
 8001220:	461a      	mov	r2, r3
 8001222:	4623      	mov	r3, r4
 8001224:	71fb      	strb	r3, [r7, #7]
 8001226:	4603      	mov	r3, r0
 8001228:	71bb      	strb	r3, [r7, #6]
 800122a:	460b      	mov	r3, r1
 800122c:	717b      	strb	r3, [r7, #5]
 800122e:	4613      	mov	r3, r2
 8001230:	713b      	strb	r3, [r7, #4]
	if (led_state) {
 8001232:	79bb      	ldrb	r3, [r7, #6]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00a      	beq.n	800124e <setIntensity+0x3a>
		if (led_mode || intensity < intensity_set_point) {
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d103      	bne.n	8001246 <setIntensity+0x32>
 800123e:	797a      	ldrb	r2, [r7, #5]
 8001240:	793b      	ldrb	r3, [r7, #4]
 8001242:	429a      	cmp	r2, r3
 8001244:	d20d      	bcs.n	8001262 <setIntensity+0x4e>
			intensity += PWM_INCREMENT;
 8001246:	797b      	ldrb	r3, [r7, #5]
 8001248:	3301      	adds	r3, #1
 800124a:	717b      	strb	r3, [r7, #5]
 800124c:	e009      	b.n	8001262 <setIntensity+0x4e>
		}
	}
	else {
		if (led_mode || intensity > intensity_set_point) {
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d103      	bne.n	800125c <setIntensity+0x48>
 8001254:	797a      	ldrb	r2, [r7, #5]
 8001256:	793b      	ldrb	r3, [r7, #4]
 8001258:	429a      	cmp	r2, r3
 800125a:	d902      	bls.n	8001262 <setIntensity+0x4e>
			intensity -= PWM_INCREMENT;
 800125c:	797b      	ldrb	r3, [r7, #5]
 800125e:	3b01      	subs	r3, #1
 8001260:	717b      	strb	r3, [r7, #5]
		}
	}

	return intensity;
 8001262:	797b      	ldrb	r3, [r7, #5]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bc90      	pop	{r4, r7}
 800126c:	4770      	bx	lr
	...

08001270 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <SystemInit+0x84>)
 8001276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127a:	4a1e      	ldr	r2, [pc, #120]	; (80012f4 <SystemInit+0x84>)
 800127c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001280:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <SystemInit+0x88>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a1b      	ldr	r2, [pc, #108]	; (80012f8 <SystemInit+0x88>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <SystemInit+0x88>)
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	4918      	ldr	r1, [pc, #96]	; (80012f8 <SystemInit+0x88>)
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <SystemInit+0x8c>)
 8001298:	4013      	ands	r3, r2
 800129a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <SystemInit+0x88>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a15      	ldr	r2, [pc, #84]	; (80012f8 <SystemInit+0x88>)
 80012a2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80012a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012aa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <SystemInit+0x88>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a11      	ldr	r2, [pc, #68]	; (80012f8 <SystemInit+0x88>)
 80012b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <SystemInit+0x88>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <SystemInit+0x88>)
 80012be:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80012c2:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <SystemInit+0x88>)
 80012c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c8:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <SystemInit+0x88>)
 80012ca:	f023 030f 	bic.w	r3, r3, #15
 80012ce:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <SystemInit+0x88>)
 80012d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012d4:	4908      	ldr	r1, [pc, #32]	; (80012f8 <SystemInit+0x88>)
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <SystemInit+0x90>)
 80012d8:	4013      	ands	r3, r2
 80012da:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <SystemInit+0x88>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012e2:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <SystemInit+0x84>)
 80012e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012e8:	609a      	str	r2, [r3, #8]
#endif
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00
 80012f8:	40021000 	.word	0x40021000
 80012fc:	f87fc00c 	.word	0xf87fc00c
 8001300:	ff00fccc 	.word	0xff00fccc

08001304 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	f003 021f 	and.w	r2, r3, #31
 8001330:	4907      	ldr	r1, [pc, #28]	; (8001350 <NVIC_EnableIRQ+0x30>)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	095b      	lsrs	r3, r3, #5
 8001338:	2001      	movs	r0, #1
 800133a:	fa00 f202 	lsl.w	r2, r0, r2
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000e100 	.word	0xe000e100

08001354 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	6039      	str	r1, [r7, #0]
 800135e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001364:	2b00      	cmp	r3, #0
 8001366:	da0b      	bge.n	8001380 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	b2da      	uxtb	r2, r3
 800136c:	490c      	ldr	r1, [pc, #48]	; (80013a0 <NVIC_SetPriority+0x4c>)
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	f003 030f 	and.w	r3, r3, #15
 8001374:	3b04      	subs	r3, #4
 8001376:	0112      	lsls	r2, r2, #4
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	440b      	add	r3, r1
 800137c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800137e:	e009      	b.n	8001394 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	b2da      	uxtb	r2, r3
 8001384:	4907      	ldr	r1, [pc, #28]	; (80013a4 <NVIC_SetPriority+0x50>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	0112      	lsls	r2, r2, #4
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	440b      	add	r3, r1
 8001390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b089      	sub	sp, #36	; 0x24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f1c3 0307 	rsb	r3, r3, #7
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	bf28      	it	cs
 80013c6:	2304      	movcs	r3, #4
 80013c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3304      	adds	r3, #4
 80013ce:	2b06      	cmp	r3, #6
 80013d0:	d902      	bls.n	80013d8 <NVIC_EncodePriority+0x30>
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3b03      	subs	r3, #3
 80013d6:	e000      	b.n	80013da <NVIC_EncodePriority+0x32>
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	f04f 32ff 	mov.w	r2, #4294967295
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	401a      	ands	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f0:	f04f 31ff 	mov.w	r1, #4294967295
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	43d9      	mvns	r1, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	4313      	orrs	r3, r2
         );
}
 8001402:	4618      	mov	r0, r3
 8001404:	3724      	adds	r7, #36	; 0x24
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <LL_AHB1_GRP1_EnableClock>:
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800141a:	695a      	ldr	r2, [r3, #20]
 800141c:	4907      	ldr	r1, [pc, #28]	; (800143c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4313      	orrs	r3, r2
 8001422:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001426:	695a      	ldr	r2, [r3, #20]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4013      	ands	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800142e:	68fb      	ldr	r3, [r7, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	40021000 	.word	0x40021000

08001440 <LL_APB1_GRP1_EnableClock>:
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <LL_APB1_GRP1_EnableClock+0x2c>)
 800144a:	69da      	ldr	r2, [r3, #28]
 800144c:	4907      	ldr	r1, [pc, #28]	; (800146c <LL_APB1_GRP1_EnableClock+0x2c>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4313      	orrs	r3, r2
 8001452:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001456:	69da      	ldr	r2, [r3, #28]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4013      	ands	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800145e:	68fb      	ldr	r3, [r7, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	40021000 	.word	0x40021000

08001470 <LL_TIM_EnableCounter>:
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f043 0201 	orr.w	r2, r3, #1
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	601a      	str	r2, [r3, #0]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_TIM_DisableARRPreload>:
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	601a      	str	r2, [r3, #0]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <LL_TIM_CC_EnableChannel>:
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a1a      	ldr	r2, [r3, #32]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	431a      	orrs	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	621a      	str	r2, [r3, #32]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <LL_TIM_OC_DisableFast>:
{
 80014d4:	b4b0      	push	{r4, r5, r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d028      	beq.n	8001536 <LL_TIM_OC_DisableFast+0x62>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d023      	beq.n	8001532 <LL_TIM_OC_DisableFast+0x5e>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2b10      	cmp	r3, #16
 80014ee:	d01e      	beq.n	800152e <LL_TIM_OC_DisableFast+0x5a>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	2b40      	cmp	r3, #64	; 0x40
 80014f4:	d019      	beq.n	800152a <LL_TIM_OC_DisableFast+0x56>
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014fc:	d013      	beq.n	8001526 <LL_TIM_OC_DisableFast+0x52>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001504:	d00d      	beq.n	8001522 <LL_TIM_OC_DisableFast+0x4e>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800150c:	d007      	beq.n	800151e <LL_TIM_OC_DisableFast+0x4a>
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001514:	d101      	bne.n	800151a <LL_TIM_OC_DisableFast+0x46>
 8001516:	2307      	movs	r3, #7
 8001518:	e00e      	b.n	8001538 <LL_TIM_OC_DisableFast+0x64>
 800151a:	2308      	movs	r3, #8
 800151c:	e00c      	b.n	8001538 <LL_TIM_OC_DisableFast+0x64>
 800151e:	2306      	movs	r3, #6
 8001520:	e00a      	b.n	8001538 <LL_TIM_OC_DisableFast+0x64>
 8001522:	2305      	movs	r3, #5
 8001524:	e008      	b.n	8001538 <LL_TIM_OC_DisableFast+0x64>
 8001526:	2304      	movs	r3, #4
 8001528:	e006      	b.n	8001538 <LL_TIM_OC_DisableFast+0x64>
 800152a:	2303      	movs	r3, #3
 800152c:	e004      	b.n	8001538 <LL_TIM_OC_DisableFast+0x64>
 800152e:	2302      	movs	r3, #2
 8001530:	e002      	b.n	8001538 <LL_TIM_OC_DisableFast+0x64>
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <LL_TIM_OC_DisableFast+0x64>
 8001536:	2300      	movs	r3, #0
 8001538:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3318      	adds	r3, #24
 800153e:	461a      	mov	r2, r3
 8001540:	4629      	mov	r1, r5
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <LL_TIM_OC_DisableFast+0x94>)
 8001544:	5c5b      	ldrb	r3, [r3, r1]
 8001546:	4413      	add	r3, r2
 8001548:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800154a:	6822      	ldr	r2, [r4, #0]
 800154c:	4629      	mov	r1, r5
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <LL_TIM_OC_DisableFast+0x98>)
 8001550:	5c5b      	ldrb	r3, [r3, r1]
 8001552:	4619      	mov	r1, r3
 8001554:	2304      	movs	r3, #4
 8001556:	408b      	lsls	r3, r1
 8001558:	43db      	mvns	r3, r3
 800155a:	4013      	ands	r3, r2
 800155c:	6023      	str	r3, [r4, #0]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bcb0      	pop	{r4, r5, r7}
 8001566:	4770      	bx	lr
 8001568:	08001884 	.word	0x08001884
 800156c:	08001890 	.word	0x08001890

08001570 <LL_TIM_OC_EnablePreload>:
{
 8001570:	b4b0      	push	{r4, r5, r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d028      	beq.n	80015d2 <LL_TIM_OC_EnablePreload+0x62>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	2b04      	cmp	r3, #4
 8001584:	d023      	beq.n	80015ce <LL_TIM_OC_EnablePreload+0x5e>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	2b10      	cmp	r3, #16
 800158a:	d01e      	beq.n	80015ca <LL_TIM_OC_EnablePreload+0x5a>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	2b40      	cmp	r3, #64	; 0x40
 8001590:	d019      	beq.n	80015c6 <LL_TIM_OC_EnablePreload+0x56>
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001598:	d013      	beq.n	80015c2 <LL_TIM_OC_EnablePreload+0x52>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015a0:	d00d      	beq.n	80015be <LL_TIM_OC_EnablePreload+0x4e>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015a8:	d007      	beq.n	80015ba <LL_TIM_OC_EnablePreload+0x4a>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b0:	d101      	bne.n	80015b6 <LL_TIM_OC_EnablePreload+0x46>
 80015b2:	2307      	movs	r3, #7
 80015b4:	e00e      	b.n	80015d4 <LL_TIM_OC_EnablePreload+0x64>
 80015b6:	2308      	movs	r3, #8
 80015b8:	e00c      	b.n	80015d4 <LL_TIM_OC_EnablePreload+0x64>
 80015ba:	2306      	movs	r3, #6
 80015bc:	e00a      	b.n	80015d4 <LL_TIM_OC_EnablePreload+0x64>
 80015be:	2305      	movs	r3, #5
 80015c0:	e008      	b.n	80015d4 <LL_TIM_OC_EnablePreload+0x64>
 80015c2:	2304      	movs	r3, #4
 80015c4:	e006      	b.n	80015d4 <LL_TIM_OC_EnablePreload+0x64>
 80015c6:	2303      	movs	r3, #3
 80015c8:	e004      	b.n	80015d4 <LL_TIM_OC_EnablePreload+0x64>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e002      	b.n	80015d4 <LL_TIM_OC_EnablePreload+0x64>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <LL_TIM_OC_EnablePreload+0x64>
 80015d2:	2300      	movs	r3, #0
 80015d4:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3318      	adds	r3, #24
 80015da:	461a      	mov	r2, r3
 80015dc:	4629      	mov	r1, r5
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <LL_TIM_OC_EnablePreload+0x94>)
 80015e0:	5c5b      	ldrb	r3, [r3, r1]
 80015e2:	4413      	add	r3, r2
 80015e4:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80015e6:	6822      	ldr	r2, [r4, #0]
 80015e8:	4629      	mov	r1, r5
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <LL_TIM_OC_EnablePreload+0x98>)
 80015ec:	5c5b      	ldrb	r3, [r3, r1]
 80015ee:	4619      	mov	r1, r3
 80015f0:	2308      	movs	r3, #8
 80015f2:	408b      	lsls	r3, r1
 80015f4:	4313      	orrs	r3, r2
 80015f6:	6023      	str	r3, [r4, #0]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bcb0      	pop	{r4, r5, r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	08001884 	.word	0x08001884
 8001608:	08001890 	.word	0x08001890

0800160c <LL_TIM_SetClockSource>:
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800161e:	f023 0307 	bic.w	r3, r3, #7
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	609a      	str	r2, [r3, #8]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <LL_TIM_SetTriggerOutput>:
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	605a      	str	r2, [r3, #4]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <LL_TIM_DisableMasterSlaveMode>:
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	609a      	str	r2, [r3, #8]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <LL_TIM_EnableIT_UPDATE>:
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f043 0201 	orr.w	r2, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	60da      	str	r2, [r3, #12]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b094      	sub	sp, #80	; 0x50
 80016a0:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80016a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	2220      	movs	r2, #32
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f8ce 	bl	800185c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]
 80016ce:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f7ff feb5 	bl	8001440 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80016d6:	f7ff fe15 	bl	8001304 <NVIC_GetPriorityGrouping>
 80016da:	4603      	mov	r3, r0
 80016dc:	2200      	movs	r2, #0
 80016de:	2100      	movs	r1, #0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fe61 	bl	80013a8 <NVIC_EncodePriority>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4619      	mov	r1, r3
 80016ea:	201c      	movs	r0, #28
 80016ec:	f7ff fe32 	bl	8001354 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80016f0:	201c      	movs	r0, #28
 80016f2:	f7ff fe15 	bl	8001320 <NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 799;
 80016f6:	f240 331f 	movw	r3, #799	; 0x31f
 80016fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80016fc:	2300      	movs	r3, #0
 80016fe:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 99;
 8001700:	2363      	movs	r3, #99	; 0x63
 8001702:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001704:	2300      	movs	r3, #0
 8001706:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001708:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800170c:	4619      	mov	r1, r3
 800170e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001712:	f7fe ff5d 	bl	80005d0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001716:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800171a:	f7ff feb9 	bl	8001490 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 800171e:	2100      	movs	r1, #0
 8001720:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001724:	f7ff ff72 	bl	800160c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001728:	2101      	movs	r1, #1
 800172a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800172e:	f7ff ff1f 	bl	8001570 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001732:	2360      	movs	r3, #96	; 0x60
 8001734:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001742:	2300      	movs	r3, #0
 8001744:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001746:	f107 031c 	add.w	r3, r7, #28
 800174a:	461a      	mov	r2, r3
 800174c:	2101      	movs	r1, #1
 800174e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001752:	f7fe ffb1 	bl	80006b8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8001756:	2101      	movs	r1, #1
 8001758:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800175c:	f7ff feba 	bl	80014d4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001760:	2100      	movs	r1, #0
 8001762:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001766:	f7ff ff66 	bl	8001636 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800176a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800176e:	f7ff ff75 	bl	800165c <LL_TIM_DisableMasterSlaveMode>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001772:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001776:	f7ff fe4b 	bl	8001410 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800177a:	2320      	movs	r3, #32
 800177c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800177e:	2302      	movs	r3, #2
 8001780:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800178e:	2301      	movs	r3, #1
 8001790:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	4619      	mov	r1, r3
 8001796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179a:	f7fe fe10 	bl	80003be <LL_GPIO_Init>


  /* USER CODE BEGIN */
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 800179e:	2101      	movs	r1, #1
 80017a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80017a4:	f7ff fe84 	bl	80014b0 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableIT_UPDATE(TIM2);
 80017a8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80017ac:	f7ff ff66 	bl	800167c <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM2);
 80017b0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80017b4:	f7ff fe5c 	bl	8001470 <LL_TIM_EnableCounter>
  /* USER CODE END */
}
 80017b8:	bf00      	nop
 80017ba:	3750      	adds	r7, #80	; 0x50
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80017c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017c6:	e003      	b.n	80017d0 <LoopCopyDataInit>

080017c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80017ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017ce:	3104      	adds	r1, #4

080017d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017d0:	480b      	ldr	r0, [pc, #44]	; (8001800 <LoopForever+0xa>)
	ldr	r3, =_edata
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <LoopForever+0xe>)
	adds	r2, r0, r1
 80017d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80017d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80017d8:	d3f6      	bcc.n	80017c8 <CopyDataInit>
	ldr	r2, =_sbss
 80017da:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <LoopForever+0x12>)
	b	LoopFillZerobss
 80017dc:	e002      	b.n	80017e4 <LoopFillZerobss>

080017de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80017de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80017e0:	f842 3b04 	str.w	r3, [r2], #4

080017e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <LoopForever+0x16>)
	cmp	r2, r3
 80017e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80017e8:	d3f9      	bcc.n	80017de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017ea:	f7ff fd41 	bl	8001270 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ee:	f000 f811 	bl	8001814 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017f2:	f7ff fbe7 	bl	8000fc4 <main>

080017f6 <LoopForever>:

LoopForever:
    b LoopForever
 80017f6:	e7fe      	b.n	80017f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017f8:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80017fc:	080018a4 	.word	0x080018a4
	ldr	r0, =_sdata
 8001800:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001804:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 8001808:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 800180c:	20000028 	.word	0x20000028

08001810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC1_2_IRQHandler>
	...

08001814 <__libc_init_array>:
 8001814:	b570      	push	{r4, r5, r6, lr}
 8001816:	4e0d      	ldr	r6, [pc, #52]	; (800184c <__libc_init_array+0x38>)
 8001818:	4c0d      	ldr	r4, [pc, #52]	; (8001850 <__libc_init_array+0x3c>)
 800181a:	1ba4      	subs	r4, r4, r6
 800181c:	10a4      	asrs	r4, r4, #2
 800181e:	2500      	movs	r5, #0
 8001820:	42a5      	cmp	r5, r4
 8001822:	d109      	bne.n	8001838 <__libc_init_array+0x24>
 8001824:	4e0b      	ldr	r6, [pc, #44]	; (8001854 <__libc_init_array+0x40>)
 8001826:	4c0c      	ldr	r4, [pc, #48]	; (8001858 <__libc_init_array+0x44>)
 8001828:	f000 f820 	bl	800186c <_init>
 800182c:	1ba4      	subs	r4, r4, r6
 800182e:	10a4      	asrs	r4, r4, #2
 8001830:	2500      	movs	r5, #0
 8001832:	42a5      	cmp	r5, r4
 8001834:	d105      	bne.n	8001842 <__libc_init_array+0x2e>
 8001836:	bd70      	pop	{r4, r5, r6, pc}
 8001838:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800183c:	4798      	blx	r3
 800183e:	3501      	adds	r5, #1
 8001840:	e7ee      	b.n	8001820 <__libc_init_array+0xc>
 8001842:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001846:	4798      	blx	r3
 8001848:	3501      	adds	r5, #1
 800184a:	e7f2      	b.n	8001832 <__libc_init_array+0x1e>
 800184c:	0800189c 	.word	0x0800189c
 8001850:	0800189c 	.word	0x0800189c
 8001854:	0800189c 	.word	0x0800189c
 8001858:	080018a0 	.word	0x080018a0

0800185c <memset>:
 800185c:	4402      	add	r2, r0
 800185e:	4603      	mov	r3, r0
 8001860:	4293      	cmp	r3, r2
 8001862:	d100      	bne.n	8001866 <memset+0xa>
 8001864:	4770      	bx	lr
 8001866:	f803 1b01 	strb.w	r1, [r3], #1
 800186a:	e7f9      	b.n	8001860 <memset+0x4>

0800186c <_init>:
 800186c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186e:	bf00      	nop
 8001870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001872:	bc08      	pop	{r3}
 8001874:	469e      	mov	lr, r3
 8001876:	4770      	bx	lr

08001878 <_fini>:
 8001878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800187a:	bf00      	nop
 800187c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800187e:	bc08      	pop	{r3}
 8001880:	469e      	mov	lr, r3
 8001882:	4770      	bx	lr
